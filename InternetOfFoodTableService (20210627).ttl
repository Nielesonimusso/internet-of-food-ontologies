@prefix : <http://www.foodvoc.org/resource/InternetOfFood/> .
@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix inof: <http://www.foodvoc.org/resource/InternetOfFood/> .
@prefix table: <http://www.foodvoc.org/resource/InternetOfFood/Table> .
@prefix service: <http://www.foodvoc.org/resource/InternetOfFood/Service> .




@prefix om: <http://www.ontology-of-units-of-measure.org/resource/om-2/> .
@prefix omx: <http://www.foodvoc.org/resource/InternetOfFood/> .     # OM extension
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix owl2: <http://www.w3.org/2006/12/owl2#> .
@prefix owl3: <http://www.foodvoc.org/resource/InternetOfFood/> .    # Imaginary Owl version (does not exist)
@prefix prov: <http://www.w3.org/ns/prov/> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix skos: <http://www.w3.org/2004/02/skos/core#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .


# Change http adresses of inof:, table:, service:, and tmfts: to urn's? If so, use rdfs:isDefinedBy.

inof:
  a owl:Ontology ;
#  rdfs:isDefinedBy
#    <http://www.w3.org/TR/owl2-mapping-to-rdf/>,      # Voorbeeld; uit de ontologie van Owl zelf.
#    <http://www.w3.org/TR/owl2-rdf-based-semantics/>, # Voorbeeld; uit de ontologie van Owl zelf.
#    <http://www.w3.org/TR/owl2-syntax/> ;             # Voorbeeld; uit de ontologie van Owl zelf.
  owl:imports <http://www.w3.org/2004/02/skos/core> ;
# De andere ontologieën die we met de prefixes aangeven ook importeren? Dit zouden dan wel echt http's zijn.
.

table:DataSchemaClass # The word 'Schema' because 'Table' as it originally was is considered confusing representing a class of _Observations_, i.e., rows/records.
  rdfs:label "data schema classes" ;
#  rdfs:isDefinedBy <http://www.foodvoc.org/resource/InternetOfFood/Table> ; # Alle producties hierna moeten ook zo'n definitie krijgen.
  rdfs:subClassOf rdfs:Class ;
.

table:ColumnProperty
  rdfs:subClassOf owl:DatatypeProperty , # table:ColumnProperty ISNOT a property, but its _instances_ are properties.
    owl:FunctionalProperty ,
    [a owl:Restriction ;
      owl:onProperty rdfs:domain ;
      owl:toClass table:DataSchemaClass] ;
.

table:hasColumnProperty
  a owl:AnnotationProperty ;
  rdfs:subPropertyOf [owl:inverseProperyOf rdfs:domain] ;
  rdfs:domain table:DataSchemaClass ;
  rdfs:range table:ColumnProperty ;
.

table:hasColumnName
  a owl:AnnotationProperty ; # Waarom is table:hasColumnName een annotation property en geen datatype property?
                                    # => Omdat de instances van ColumnProperty rdfs:Properties zijn en binnen DL geen
                                    # statements gemaakt mogen worden over properties. Maar een rdf:description of rdf:label
                                    # van een property geeft geen hogere complexiteit. Als speciale escape valve is de
                                    # AnnotationProperty uitgevonden.
  rdfs:subPropertyOf rdfs:label ;
  rdfs:domain table:ColumnProperty ;
  rdfs:range xsd:string ;
.


service:Service
  rdfs:label "service" ;
  a owl:Class ;
.

service:Model
  rdfs:label "model" ;
  a owl:Class ;
  rdfs:subClassOf service:Service ;
.


service:Argument
  a owl:Class ;
.

# Onderscheid input- en output-arguments niet nodig. Zit al in de properties van een model. Is rol.
# Zeker ook met het maken van een chain van berekeningen kan een tabel eerst output en vervolgens output zijn.

#service:InputArgument
#  a owl:Class ;
#  rdfs:subClassOf service:Argument ;
#.

#service:OutputArgument
#  a owl:Class ;
#  rdfs:subClassOf service:Argument ;
#.

#service:hasArgument
#  a owl:ObjectProperty ;
#  rdfs:domain service:Service ;
#  rdfs:range service:Argument ;
#.

service:hasInputArgument
#  rdfs:subPropertyOf service:hasArgument ;
  rdfs:domain service:Service ;
#  rdfs:range service:InputArgument ;
  rdfs:range service:Argument ;
.

service:hasOutputArgument
#  rdfs:subProperyOf service:hasArgument ;
  rdfs:domain service:Service ;
#  rdfs:range service:OutputArgument ;
  rdfs:range service:Argument ;
.

service:hasArgumentName
  a owl:DatatypeProperty ;
  rdfs:subPropertyOf rdfs:label ;
  rdfs:domain service:Argument ;
  rdfs:range xsd:string ;
.

service:hasArgumentSchema
#  a owl:AnnotationProperty ;
  a owl:ObjectProperty ;
  rdfs:domain service:Argument ;
  rdfs:range table:DataSchemaClass ;
.




table:InterfaceObjectProperty
  rdfs:subClassOf owl:ObjectProperty,
    [a owl:Restriction ;
     owl:onProperty rdfs:domain ;
     owl:toClass table:DataSchemaClass] ;
.

table:InterfaceDatatypeProperty
  rdfs:subClassOf owl:DatatypeProperty,
    [a owl:Restriction ;
     owl:onProperty rdfs:domain ;
     owl:toClass table:DataSchemaClass] ;
.

#service:hasInterfaceObjectProperty
#  a owl:AnnotationProperty ;
#  rdfs:domain service:Service ;
#  rdfs:range table:InterfaceObjectProperty ;
#.

#service:hasInterfaceDatatypeProperty
#  a owl:AnnotationProperty ;
#  rdfs:domain service:Service ;
#  rdfs:range table:InterfaceObjectProperty ;
#.




omx:MeasureDefiningPropertyPair
  a rdfs:Class.        #This may ,perhaps, technically be an owl:Class but it is better to think of this as outside owl:Class. 

omx:isQuantityPropertyOf
  a rdfs:Property,     #No owl:ObjectProperty because instances of range are Properties and domain is just rdfs:Class 
  owl:InverseFunctionalProperty; 
  rdfs:domain omx:QuantityFunctionalProperty;
  rdfs:range omx:MeasureDefiningPropertyPair.

omx:hasNumericalValueProperty
  a rdfs:Property;     #No owl:ObjectProperty because instances of range are Properties and domain is just rdfs:Class
  rdfs:domain omx:MeasureDefiningPropertyPair;
  rdfs:range omx:NumericFunctionalProperty.

omx:hasUnitProperty
  a rdfs:Property;     #No owl:ObjectProperty because instances of range are Properties and domain is just rdfs:Class
  rdfs:domain omx:MeasureDefiningPropertyPair;
  rdfs:range omx:UnitFunctionalProperty.

omx:hasFixedUnit
  a rdfs:Property;     #No owl:ObjectProperty because instances of range are Properties and domain is just rdfs:Class
  rdfs:domain omx:MeasureDefiningPropertyPair;
  rdfs:range om:Unit.
	
omx:NumericValueFunctionalProperty
  a rdfs:Class;   #NOT owl:Class, instances are properties
                                      owl:intersectionOf(
                                                 owl:DataTypeProperty 
                                                 owl:FunctionalProperty                                            
                                                 [ a owl:Restriction;
                                                       owl:onProperty rdfs:range;
                                                       owl:toClass [ a owl:Restriction;
                                                       			    owl:onPropery rdfs:subClassOf;
#			    						    owl:toValue xsd:numeric]  # It seems this type doesnot exist?
			    						    owl:toValue xsd:decimal]
					       ]
                                         )
.

omx:UnitFunctionalProperty
  a rdfs:Class;  #NOT owl:Class, instances are properties
                                  owl:intersectionOf(
                                        owl:ObjectProperty
                                        owl:FunctionalProperty
                                        [ a owl:Restriction;
                                                owl:onProperty rdfs:range;
                                                owl:toClass [ a owl:Restiction;
                                                                         owl:onProperty rdfs:subClassOf;
                                                                         owl:toValue om:Unit]
                                        ]
                                      )
.

omx:QuantityFunctionalProperty
  a rdfs:Class;  #NOT owl:Class, instances are properties
                                      owl:intersectionOf(
                                                 owl:ObjectProperty 
                                                 owl:FunctionalProperty                                            
                                                 [ a owl:Restriction;
                                                       owl:onProperty rdfs:range;
                                                       owl:toClass [ a owl:Restriction;
                                                       			    owl:onProperty rdfs:subClassOf;
			    						    owl:toValue om:Quantity]
					      ]
                                         )
.

#mail rogier wo 9 juni 22:40




