@prefix : <http://www.foodvoc.org/resource/InternetOfFood/> .
@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix inof: <http://www.foodvoc.org/resource/InternetOfFood/> .
@prefix table: <http://www.foodvoc.org/resource/InternetOfFood/Table> .
@prefix service: <http://www.foodvoc.org/resource/InternetOfFood/Service> .



@prefix wp2sm: <http://www.foodvoc.org/resource/InternetOfFood/WP2SensorModel> . #@prefix calm: urn://Drops-R-US:XYZ-12345:

@prefix om: <http://www.ontology-of-units-of-measure.org/resource/om-2/> .
@prefix omx: <http://www.foodvoc.org/resource/InternetOfFood/> .     # OM extension
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix owl2: <http://www.w3.org/2006/12/owl2#> .
@prefix owl3: <http://www.foodvoc.org/resource/InternetOfFood/> .    # Imaginary Owl version (does not exist)
@prefix prov: <http://www.w3.org/ns/prov/> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix skos: <http://www.w3.org/2004/02/skos/core#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .


# Change http adresses of inof:, table:, service:, and tmfts: to urn's? If so, use rdfs:isDefinedBy.

wp2sm:
  a owl:Ontology ;
#  rdfs:isDefinedBy
#    <http://www.w3.org/TR/owl2-mapping-to-rdf/>,      # Voorbeeld; uit de ontologie van Owl zelf.
#    <http://www.w3.org/TR/owl2-rdf-based-semantics/>, # Voorbeeld; uit de ontologie van Owl zelf.
#    <http://www.w3.org/TR/owl2-syntax/> ;             # Voorbeeld; uit de ontologie van Owl zelf.
  owl:imports <http://www.w3.org/2004/02/skos/core> ;
# De andere ontologieën die we met de prefixes aangeven ook importeren? Dit zouden dan wel echt http's zijn.
.

# WP2 Sensor Model (wp2sm)

# Stored in wp2sm:

#xxx:ElectroMagneticRadiation a om:PhysicalPhenomenon;
wp2sm:ElectroMagneticRadiation a om:Phenomenon;
#	om:hasCharacteristic xxx:wavelength;
	wp2sm:hasCharacteristic om:Wavelength;
	dcterms:description 
"Electromagnetic radiation is a wave phenomenon caused by varying electric and magnetic fields propagating with the speed of light (in vacuum). EM radiation of different wavelength encompasses phenomena such as radiowaves, microwaves, infrared, ultra violet, X-rays, and gamma radiation" ;
	rdfs:label "EM radiation".

wp2sm:InfraRedLight rdfs:subClassOf wp2sm:ElectronMagneticRadiation;
	dcterms:description
"Infrared light is electromagnetic radiation with a wavelength between the 700nm (deep visible red) to 1 mm".

wp2sm:DropletSize rdfs:subClassOf om:Length ;
	dcterms:description 
"the mean droplet size of a suspension to be measured by the Drops-R-US XYZ12345 NIR spectrometre".

om:LogarithmicAttenuation
  rdfs:label "logarithmic attenuation"@en ;
  a owl:Class ;
  rdfs:subclassOf om:Quantity ;
.

om:LogarithmicAttenuation
  om:commonlyHasUnit om:decibel ;
  om:commonlyHasUnit om:one ;
.

om:LogarithmicAttenuationUnit
  rdfs:label "logarithmic attenuation unit"@en ;
  a owl:Class ;
  rdfs:subClassOf om:Unit ;
	dcterms:description
"The log (base 10) attenuation of the NIR light passed trough the suspension in the DropsRUS XYZ123456 NIR spectrometre" ;
  owl:oneOf (om:decibel #One on the log10(Attenuation) scale
             om:one) ;
.

om:LogarithmicAttenuation
  rdfs:subClassOf
    [a owl:Restriction ;
      owl:onProperty om:hasUnit ;
      owl:toClass om:LogarithmicAttenuationUnit] ;
.




om:LogarithmicLength
  rdfs:label "logarithmic length"@en ;
  a owl:Class ;
  rdfs:subclassOf om:Quantity ;
.

om:LogarithmicLength
  om:commonlyHasUnit om:decibel ;
  om:commonlyHasUnit om:one ;
.

om:LogarithmicLengthUnit
  rdfs:label "logarithmic length unit"@en ;
  a owl:Class ;
  rdfs:subClassOf om:Unit ;
  owl:oneOf (om:decibel
             om:one) ;
.

om:LogarithmicLength
  rdfs:subClassOf
    [a owl:Restriction ;
      owl:onProperty om:hasUnit ;
      owl:toClass om:LogarithmicLengthUnit] ;
.




om:LogarithmicAttenuationPerLogarithmicLength
  rdfs:label "logarithmic attenuation per logarithmic length"@en ;
  a owl:Class ;
  rdfs:subclassOf om:Quantity ;
.

om:LogarithmicAttenuationPerLogarithmicLength
  om:commonlyHasUnit om:decibelPerDecibel ;
  om:commonlyHasUnit om:one ;
.

om:decibelPerDecibel
  a om:UnitDivision ;
  rdfs:label "decibel per decibel"@en ;
  om:symbol "dB/dB" ;
  om:hasNumerator om:decibel ;
  om:hasDenominator om:decibel ;
  om:hasDimension om:dimensionOne ;
.

om:LogarithmicAttenuationPerLogarithmicLengthUnit
  rdfs:label "logarithmic attenuation per logarithmic length unit"@en ;
  a owl:Class ;
  rdfs:subClassOf om:Unit ;
  owl:oneOf (om:decibelPerDecibel
             om:one) ;
.

om:LogarithmicAttenuation
  rdfs:subClassOf
    [a owl:Restriction ;
      owl:onProperty om:hasUnit ;
      owl:toClass om:LogarithmicAttenuationPerLogarithmicLengthUnit] ;
.


wp2sm:CalibrationSchema 
  a table:DataSchemaClass ;
  table:hasColumnProperty wp2sm:calibration_dropletSize,
                          wp2sm:calibration_wavelength,
                          wp2sm:calibration_log10Attenuation.

wp2sm:calibration_dropletSize
#  a table:ColumnProperty, owl:DatatypeProperty, owl:FunctionalProperty;
  a table:ColumnProperty ;
  rdfs:domain wp2sm:CalibrationSchema;
  rdfs:range xsd:double;
  table:hasColumnName "Droplet size (µm)".

wp2sm:calibration_wavelength
#  a table:ColumnProperty, owl:DatatypeProperty, owl:FunctionalProperty;
  a table:ColumnProperty ;
  rdfs:domain wp2sm:CalibrationSchema;
  rdfs:range xsd:double;
  table:hasColumnName "Lambda (nm)".

wp2sm:calibration_log10Attenuation
#  a table:ColumnProperty, owl:DatatypeProperty, owl:FunctionalProperty;
  a table:ColumnProperty ;
  rdfs:domain wp2sm:CalibrationSchema;
  rdfs:range xsd:double;
  table:hasColumnName "Log10(Attenuation)".

wp2sm:calibrationDropletSize
#  a table:InterfaceProperty, owl:ObjectProperty, owl:FunctionalProperty;
  a table:InterfaceProperty ;
  rdfs:domain wp2sm:CalibrationSchema;
#  rdfs:range om:Length;
  rdfs:range wp2sm:DropletSize;
  omx:isQuantityPropertyOf 
    [omx:hasNumericalValueProperty wp2sm:calibration_dropletSize;
     omx:hasFixedUnit om:micrometre].

wp2sm:calibrationWavelengh
#  a table:InterfaceProperty, owl:ObjectProperty, owl:FunctionalProperty;
  a table:InterfaceProperty;
  rdfs:domain wp2sm:CalibrationSchema;
#  rdfs:range om:Length;
  rdfs:range om:Wavelength;
  omx:isQuantityPropertyOf 
    [omx:hasNumericalValueProperty wp2sm:calibration_Wavelength;
     omx:hasFixedUnit om:nanometre].

#maybe this is overdoing it and we should leave true numerical properties
wp2sm:calibrationLog10Attenuation
#  a table:InterfaceProperty, owl:ObjectProperty, owl:FunctionalProperty;
  a table:InterfaceProperty;
  rdfs:domain wp2sm:CalibrationSchema;
  rdfs:range om:LogarithmicAttenuation;
  omx:isQuantityPropertyOf 
    [omx:hasNumericalValueProperty wp2sm:calibration_Log10Attenuation;
     omx:hasFixedUnit om:db].



wp2sm:AttenuationCurveCoefficientsSchema a table:DataSchemaClass;
	table:hasColumnProperty wp2sm:accoeff_wavelength,
				wp2sm:accoeff_alpha,
				wp2sm:accoeff_beta,
				wp2sm:accoeff_stddev_beta.

wp2sm:accoeff_wavelength
#  a table:ColumnProperty, owl:DatatypeProperty, owl:FunctionalProperty;
  a table:ColumnProperty ;
	rdfs:domain wp2sm:AttenuationCurveCoefficients;
	rdfs:range xsd:double;
	table:hasColumnName "Lambda (nm)".

wp2sm:accoeff_alpha
#  a table:ColumnProperty, owl:DatatypeProperty, owl:FunctionalProperty;
  a table:ColumnProperty ;
	rdfs:domain wp2sm:AttenuationCurveCoefficients;
	rdfs:range xsd:double;
	table:hasColumnName "alpha".

wp2sm:accoeff_beta
#  a table:ColumnProperty, owl:DatatypeProperty, owl:FunctionalProperty;
  a table:ColumnProperty ;
	rdfs:domain wp2sm:AttenuationCurveCoefficients;
	rdfs:range xsd:double;
	table:hasColumnName "beta".

wp2sm:accoeff_stddev_beta
#  a table:ColumnProperty, owl:DatatypeProperty, owl:FunctionalProperty;
  a table:ColumnProperty ;
	rdfs:domain wp2sm:AttenuationCurveCoefficients;
	rdfs:range xsd:double;
	table:hasColumnName "stddev_beta".

wp2sm:accoeffWavelengh
#  a table:InterfaceProperty, owl:ObjectProperty, owl:FunctionalProperty;
  a table:InterfaceProperty ;
	rdfs:domain wp2sm:AttenuationCurveCoefficients;;
	rdfs:range om:Wavelength;
	omx:isQuantityPropertyOf 
		[omx:hasNumericalValueProperty wp2sm:accoeff_wavelength;
		 omx:hasFixedUnit om:nanometre].

wp2sm:accoeffAlpha
#  a table:ColumnProperty, owl:ObjectProperty, owl:FunctionalProperty;
  a table:InterfaceProperty ;
	rdfs:domain wp2sm:AttenuationCurveCoefficients;
	rdfs:range om:LogartithmicAttenuation ;
	omx:isQuantityPropertyOf 
		[omx:hasNumericalValueProperty wp2sm:accoeff_alpha;
		 omx:hasFixedUnit om:decibel]. #XXXXXX!!!!

wp2sm:accoeffBeta
#  a table:ColumnProperty, owl:ObjectProperty, owl:FunctionalProperty;
  a table:InterfaceProperty ;
	rdfs:domain wp2sm:AttenuationCurveCoefficients;
#  rdfs:range om:Log10AttenuationPerWavelength. # Should this be om:LogarithmicAttenuationPerLogarithmicLength? That's the one defined above, not om:Log10AttenuationPerWavelength.
  rdfs:range om:LogarithmicAttenuationPerLogarithmicLength ;
	omx:isQuantityPropertyOf 
		[omx:hasNumericalValueProperty wp2sm:accoeff_alpha;
		 omx:hasFixedUnit om:decibelPerdecibel]. #XXXXXX!!!!

wp2sm:accoeffStdDevBeta
#  a table:ColumnProperty, owl:ObjectProperty, owl:FunctionalProperty;
  a table:InterfaceProperty ;
	rdfs:domain wp2sm:AttenuationCurveCoefficients;
#  rdfs:range om:Log10AttenuationPerWavelength. # Should this be om:LogarithmicAttenuationPerLogarithmicLength? That's the one defined above, not om:Log10AttenuationPerWavelength.
  rdfs:range om:LogarithmicAttenuationPerLogarithmicLength ;
	omx:isQuantityPropertyOf 
		[omx:hasNumericalValueProperty wp2sm:accoeff_alpha;
		 omx:hasFixedUnit om:decibelPerdecibel].



wp2sm:DropSizeSchema a table:DataSchemaClass;
	table:hasColumnProperty wp2sm:dropsize_dropSize.

wp2sm:dropsize_dropSize
#  a table:ColumnProperty, owl:DatatypeProperty, owl:FunctionalProperty;
  a table:ColumnProperty ;
	rdfs:domain wp2sm:DropSizeSchema;
	rdfs:range xsd:double;
	table:hasColumnName "Droplet size (µm)".
 
wp2sm:dropsizeDropSize
#  a table:InterfaceProperty, owl:ObjectProperty, owl:FunctionalProperty;
  a table:InterfaceProperty ;
	rdfs:domain wp2sm:DropSizeSchema;
#	 rdfs:range om:Length;
	rdfs:range om:DropletSize;
	omx:isQuantityPropertyOf 
		[omx:hasNumericalValueProperty wp2sm:dropsize_dropSize;
		 omx:hasFixedUnit om:micrometre].



wp2sm:dropsizeCalibrationModel
#  a service:Model;
  a service:Service;
	service:hasInputArgument wp2sm:argument_CalibrationData;
	service:hasOutputArgument wp2sm:argument_AttenuationCurveCoeffcients,
			          wp2sm:argument_GeometricMeanDropsize;
	dcterms:description 
"service that computes the attenuation curve coefficients over a range of Near InfraRed wavelengths, from the Mie attenuation curve(s) of log10 attenuation vs wavelength for different droplet sizes For the Drops-R-US XYZ123456 NIR spectrometre see Rogier Brussee (2021): From NIR spectrometry to particle size V2. Rick Sanchez C-137 (2121), the Drops-R-US XYZ123456 NIR spectrometre, Adult Swim".

#wp2sm:input_CalibrationData a service:Argument;
wp2sm:argument_CalibrationData a service:Argument;
	service:hasArgumentName "calibration_data";
	service:hasArgumentSchema wp2sm:CalibrationSchema.

#wp2sm:output_AttenuationCurveCoeffcients a service:Argument;
wp2sm:argument_AttenuationCurveCoeffcients a service:Argument;
	service:hasArgumentName "attenuation_curve_coefficients";
	service:hasArgumentSchema wp2sm:AttenuationCurveCoefficientsSchema.

#wp2sm:output_GeometricMeanDropSize a service:Argument;
wp2sm:argument_GeometricMeanDropSize a service:Argument;
	service:hasArgumentName "geometric_mean_droplet_size_micron";
	service:hasArgumentSchema wp2sm:DropSizeSchema.



wp2sm:MeasurementSchema a table:DataSchemaClass ;
  table:hasColumnProperty 
    wp2sm:measurement_wavelength,
    wp2sm:measurement_log10Attenuation.

wp2sm:measurement_wavelength
#  a table:ColumnProperty, owl:DatatypeProperty, owl:FunctionalProperty;
  a table:ColumnProperty ;
	rdfs:domain wp2sm:MeasurementSchema;
	rdfs:range xsd:double;
	table:hasColumnName "Lambda (nm)".

wp2sm:measurement_log10Attenuation
#  a table:ColumnProperty, owl:DatatypeProperty, owl:FunctionalProperty;
  a table:ColumnProperty ;
	rdfs:domain wp2sm:MeasurementSchema;
	rdfs:range xsd:double;
	table:hasColumnName "Log10(Attenuation)".

wp2sm:measurementWavelength
#  a table:InterfaceProperty, owl:ObjectProperty, owl:FunctionalProperty;
  a table:InterfaceProperty;
	rdfs:domain wp2sm:MeasurementSchema;
	rdfs:range om:Wavelength;
	omx:isQuantityPropertyOf 
		[omx:hasNumericalValueProperty wp2sm:measurement_wavelength;
		 omx:hasFixedUnit om:nanometre].

wp2sm:measurementLog10Attenuation
#  a table:InterfaceProperty, owl:ObjectProperty, owl:FunctionalProperty;
  a table:InterfaceProperty;
	rdfs:domain wp2sm:MeasurementSchema;
	rdfs:range om:LogarithmicAttenuation;
	omx:isQuantityPropertyOf 
		[omx:hasNumericalValueProperty wp2sm:measurement_log10Attenuation;
		 omx:hasFixedUnit om:decibel].



wp2sm:dropsizeMeasurementModel
#  a service:Model;
  a service:Service;
	wp2sm:hasInputArgument wp2sm:argument_AttenuationCurveCoefficients,
			       wp2sm:argument_GeometricMeanCalibrationDropsize,
                               wp2sm:argument_MeasurementData;
	wp2sm:hasOutputArgument wp2sm:argument_Dropsize.


#wp2sm:input_AttenuationCurveCoefficients a service:Argument;
wp2sm:argument_AttenuationCurveCoefficients a service:Argument;
	service:hasArgumentName "attenuation_curve_coefficients";
	service:hasArgumentSchema wp2sm:AttenuationCurveCoefficientsSchema.

#wp2sm:input_GeometricMeanCalibrationDropsize a service:Argument;
wp2sm:argument_GeometricMeanCalibrationDropsize a service:Argument;
	service:hasArgumentName "geometric_mean_calibration_dropsize";
	service:hasArgumentSchema wp2sm:DropSizeSchema.

#wp2sm:input_MeasurementData a service:Argument;
wp2sm:argument_MeasurementData a service:Argument;
	service:hasArgumentName "measurement_data";
	service:hasArgumentSchema wp2sm:MeasurementSchema.

#wp2sm:output_Dropsize a service:Argument;
wp2sm:argument_Dropsize a service:Argument;
	service:hasArgumentName "drop_size";
	service:hasArgumentSchema wp2sm:DropSizeSchema.
